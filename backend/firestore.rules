rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Read own user document OR allow reading for login (email query)
      allow get, list: if isOwner(userId) || true; // Allow reading for login purposes
      // Create user document (for registration) - allow anyone to create with correct user_id
      allow create: if request.resource.data.user_id == userId;
      // Update/Delete only by owner, and document must belong to owner
      allow update, delete: if isOwner(userId) && resource.data.user_id == userId;

      // Subcollection: categories
      match /categories/{categoryId} {
        // Temporarily allow all operations for categories (remove auth requirement for now)
        allow read, write: if true;
        // TODO: Restore proper auth when Firebase Auth is fully integrated
        // allow get, list: if isOwner(userId);
        // allow create: if isOwner(userId) && request.resource.data.user_id == userId;
        // allow update, delete: if isOwner(userId) && resource.data.user_id == userId;
      }

      // Subcollection: tasks
      match /tasks/{taskId} {
        // Temporarily allow all operations for tasks (remove auth requirement for now)
        allow read, write: if true;
        // TODO: Restore proper auth when Firebase Auth is fully integrated
        // allow get, list: if isOwner(userId);
        // allow create: if isOwner(userId) && request.resource.data.user_id == userId;
        // allow update, delete: if isOwner(userId) && resource.data.user_id == userId;
      }

      // Subcollection: note (notes)
      match /note/{noteId} {
        // Temporarily allow all operations for notes (remove auth requirement for now)
        allow read, write: if true;
        // TODO: Restore proper auth when Firebase Auth is fully integrated
        // allow get, list: if isOwner(userId);
        // allow create: if isOwner(userId) && request.resource.data.user_id == userId;
        // allow update, delete: if isOwner(userId) && resource.data.user_id == userId;
      }
    }
  }
}
